using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestsGenerator
{
    public class TestsGenerator
    {
        public async Task<List<TestClass>> GenerateAsync(string sourceCode)
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
            var classes = syntaxTree
                .GetRoot()
                .DescendantNodes()
                .OfType<ClassDeclarationSyntax>()
                .ToList();
            var namespaceDeclaration = syntaxTree
                .GetRoot()
                .DescendantNodes()
                .OfType<NamespaceDeclarationSyntax>()
                .ToList()[0];

            var testClasses = new List<TestClass>();

            foreach (var classDeclaration in classes)
            {
                var methods = classDeclaration
                    .DescendantNodes()
                    .OfType<MethodDeclarationSyntax>()
                    .Where(method => method.Modifiers.Any(modifier => modifier.Text == "public"))
                    .ToList();

                if (methods.Count > 0)
                {
                    var testSourceCode = String.Join(
                        Environment.NewLine,
                        "using Microsoft.VisualStudio.TestTools.UnitTesting;",
                        $"using {namespaceDeclaration.Name};\n",
                        $"namespace {namespaceDeclaration.Name}.Tests\n{{",
                        "\t[TestClass]",
                        $"\tpublic class {classDeclaration.Identifier.Text}Tests\n\t{{");
                    foreach (var methodDeclaration in methods)
                    {
                        testSourceCode += String.Join(
                            Environment.NewLine,
                            "\n\t\t[TestMethod]",
                            $"\t\tpublic void {methodDeclaration.Identifier.Text}Test()\n\t\t{{",
                            "\t\t\tAssert.Fail(\"autogenerated\");\n\t\t}\n");
                    }
                    testSourceCode += "\t}\n}\n";
                    
                    testClasses.Add(new TestClass(
                        String.Format($"{classDeclaration.Identifier.Text}UnitTest.cs"), testSourceCode));
                }
            }

            return testClasses;
        }
    }
}